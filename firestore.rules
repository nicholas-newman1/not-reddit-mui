rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Functions
    function onlyMarker() {
      return incomingData().keys().hasOnly(["exists"]) 
        && incomingData().exists == true
    }
    
    function incomingData() {
    	return request.resource.data;
    }

    // Rules
    match /users/{userId} {      
      allow read;
      allow write: if 
        request.auth.uid == userId &&
        incomingData().keys().hasOnly(['username']) &&
        incomingData().keys().hasAll(['username'])
    }

    match /categories/{categoryId} {
      // useful category specific functions
      function isOwnerOfCategory() {
        return request.auth.uid == 
          get(/databases/$(database)/documents/categories/$(categoryId)).data.ownerId;
      }

      function isModerator() {
        return exists(/databases/$(database)/documents/categories/$(categoryId)/moderatorIds/$(request.auth.uid));
      }

      allow read;
      allow update: if         
        // is only updating whitelisted fields and is owner
        incomingData().keys().hasOnly(['ownerId']) && isOwnerOfCategory()

      match /moderatorIds/{moderatorId} {
        allow create: if onlyMarker() && isOwnerOfCategory();
        allow delete: if isOwnerOfCategory();
      }

      match /subscriberIds/{subscriberId} {
        allow create: if
          onlyMarker()
          // uid matches document ID
          && request.auth.uid == subscriberId
          // uid is not banned
          && !exists(/databases/$(database)/documents/categories/$(categoryId)/bannedIds/$(request.auth.uid))
          // category exists
          && exists(/databases/$(database)/documents/categories/$(categoryId));
          
        allow delete: if isOwnerOfCategory() || isModerator();
      }

      match /bannedIds/{bannedId} {
        allow create: if onlyMarker() && (isModerator() || isOwnerOfCategory());
        allow delete: if isModerator() || isOwnerOfCategory();      
      }
    }
  }
}